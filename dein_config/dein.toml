[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version < 800'
rev = '1.5'

[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version >= 800'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Erichain/vim-monokai-pro'
hook_add = '''
  au MyAutoCmd VimEnter * nested colorscheme monokai_pro
  highlight ColorColumn ctermfg=208 ctermbg=Black
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['itchyny/vim-gitbranch', 'tpope/vim-fugitive']
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'component': {
      \   'readonly': '%{&readonly?"\ue0a2":""}',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ }
      \ }

  fu! LightlineModified()
    retu &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endf

  fu! LightlineReadonly()
    retu &ft !~? 'help' && &readonly ? 'RO' : ''
  endf

  fu! LightlineFilename()
    let fname = expand('%:~')
    retu fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
      \ fname == '__Tagbar__' ? g:lightline.fname :
      \ fname =~ '__Gundo\|NERD_tree' ? '' :
      \ &ft == 'vimfiler' ? '' :
      \ &ft == 'unite' ? unite#get_status_string() :
      \ &ft == 'vimshell' ? vimshell#get_status_string() :
      \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
      \ ('' != fname ? fname : '[No Name]') .
      \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endf

  fu! LightlineFugitive()
    try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      retu branch !=# '' ? mark.branch : ''
    en
    catch
    endtry
    retu ''
  endf

  fu! LightlineFileformat()
    retu winwidth(0) > 70 ? &fileformat : ''
  endf

  fu! LightlineFiletype()
    retu winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endf

  fu! LightlineFileencoding()
    retu winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endf

  fu! LightlineMode()
    let fname = expand('%:t')
    retu fname == '__Tagbar__' ? 'Tagbar' :
      \ fname == 'ControlP' ? 'CtrlP' :
      \ fname == '__Gundo__' ? 'Gundo' :
      \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
      \ fname =~ 'NERD_tree' ? 'NERDTree' :
      \ &ft == 'unite' ? 'Unite' :
      \ &ft == 'vimfiler' ? 'VF' :
      \ &ft == 'vimshell' ? 'VimShell' :
      \ winwidth(0) > 60 ? lightline#mode() : ''
  endf

  fu! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    cal lightline#link('iR'[g:lightline.ctrlp_regex])
    retu lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
        \ , g:lightline.ctrlp_next], 0)
    else
    retu ''
    en
  endf

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
    \ }

  fu! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    retu lightline#statusline(0)
  endf

  fu! CtrlPStatusFunc_2(str)
    retu lightline#statusline(0)
  endf

  let g:tagbar_status_func = 'TagbarStatusFunc'

  fu! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    retu lightline#statusline(0)
  endf

  augroup AutoSyntastic
    au!
    au BufWritePost *.c,*.cpp cal s:syntastic()
  augroup END

  fu! s:syntastic()
    SyntasticCheck
    cal lightline#update()
  endf
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add='''
  let g:choosewin_label='sdfghjkl'
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1
'''
[[plugins]]
repo='preservim/nerdtree'
hook_add='''
  nnoremap <Leader>e :NERDTreeToggle<CR>
  let g:NERDTreeMouseMode = 0
  let g:NERDTreeMapToggleHidden = '.'
  let g:NERDTreeMapCustomOpen = 'o'
  let g:NERDTreeMapActivateNode = '<CR>'
  let g:NERDTreeShowHidden = 1

  au FileType nerdtree cal s:MyNerdTreeSettings()
  fu! s:MyNerdTreeSettings()
    cal NERDTreeAddKeyMap({
           \ 'key': 'l',
           \ 'callback': 'ToggleDir',
           \ 'quickhelpText': 'open current dir',
           \ 'scope': 'DirNode' })
    cal NERDTreeAddKeyMap({
           \ 'key': 'h',
           \ 'callback': 'ToggleDir',
           \ 'quickhelpText': 'close current dir',
           \ 'scope': 'DirNode' })
    cal NERDTreeAddKeyMap({
          \ 'key':      g:NERDTreeMapActivateNode,
          \ 'scope':    'FileNode',
          \ 'callback': 'ChooseWinOpen',
          \ 'override': 1 })

    fu! ToggleDir(directoryNode)
      if a:directoryNode.isRoot() && a:directoryNode.isOpen
          retu
      en
      cal a:directoryNode.activate({})
    endf

    fu! ChooseWinOpen(fileNode)
      let l:wincount = winnr('$')
      if l:wincount > 2
        let l:nerdwindow = win_getid()
        cal choosewin#start(range(2, l:wincount))
        cal win_gotoid(l:nerdwindow)
      en

      cal a:fileNode.activate({
        \ 'reuse': 'all',
        \ 'where': 'p',
        \ 'keepopen': !nerdtree#closeTreeOnOpen() })
    endf
  endf
'''

[[plugins]]
repo='rking/ag.vim'
[[plugins]]
repo='ctrlpvim/ctrlp.vim'
hook_add='''
  if executable('ag')
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
  en

  nnoremap <Leader>g :CtrlP<CR>
  nnoremap <Leader>b :CtrlPMixed<CR>
'''
