[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version < 800'
rev = '1.5'

[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version >= 800'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Erichain/vim-monokai-pro'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme monokai_pro
  highlight ColorColumn ctermfg=208 ctermbg=Black
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['itchyny/vim-gitbranch', 'tpope/vim-fugitive']
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'component': {
      \   'readonly': '%{&readonly?"\ue0a2":""}',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ }
      \ }

  function! LightlineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
  endfunction

  function! LightlineFilename()
    let fname = expand('%:~')
    return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
      \ fname == '__Tagbar__' ? g:lightline.fname :
      \ fname =~ '__Gundo\|NERD_tree' ? '' :
      \ &ft == 'vimfiler' ? '' :
      \ &ft == 'unite' ? unite#get_status_string() :
      \ &ft == 'vimshell' ? vimshell#get_status_string() :
      \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
      \ ('' != fname ? fname : '[No Name]') .
      \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
    catch
    endtry
    return ''
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
      \ fname == 'ControlP' ? 'CtrlP' :
      \ fname == '__Gundo__' ? 'Gundo' :
      \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
      \ fname =~ 'NERD_tree' ? 'NERDTree' :
      \ &ft == 'unite' ? 'Unite' :
      \ &ft == 'vimfiler' ? 'VF' :
      \ &ft == 'vimshell' ? 'VimShell' :
      \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
        \ , g:lightline.ctrlp_next], 0)
    else
    return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
    \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
  endfunction

  augroup AutoSyntastic
    autocmd!
    autocmd BufWritePost *.c,*.cpp call s:syntastic()
  augroup END
  function! s:syntastic()
    SyntasticCheck
    call lightline#update()
  endfunction
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add='''
  let g:choosewin_label=' sdfghjkl'
'''
[[plugins]]
repo='preservim/nerdtree'
hook_add='''
  nnoremap <Leader>e :NERDTreeToggle<CR>

  let g:NERDTreeMouseMode = 0
  let g:NERDTreeMapToggleHidden = '.'
  let g:NERDTreeMapCustomOpen = 'o'
  let g:NERDTreeMapActivateNode = '<CR>'

  autocmd VimEnter * call dein#call_hook('post_source')
'''
hook_post_source='''
  call NERDTreeAddKeyMap({
         \ 'key': 'l',
         \ 'callback': 'MyNERDTreeToggle',
         \ 'quickhelpText': 'open current dir',
         \ 'scope': 'DirNode' })

  call NERDTreeAddKeyMap({
         \ 'key': 'h',
         \ 'callback': 'MyNERDTreeToggle',
         \ 'quickhelpText': 'close current dir',
         \ 'scope': 'DirNode' })

  function! MyNERDTreeToggle(directoryNode) abort
    if a:directoryNode.isRoot() && a:directoryNode.isOpen
        return
    endif
    call a:directoryNode.activate({})
  endfunction

  " Define NERDTree key mappings.
  call NERDTreeAddKeyMap({
        \ 'key':      g:NERDTreeMapActivateNode,
        \ 'scope':    'FileNode',
        \ 'callback': 'ChooseWinOpen',
        \ 'override': 1
        \ })

  function! ChooseWinOpen(node) abort
    " It is necessary to jump back the NERDTree window, cause local buffer
    " variables are required for the following procedure.
    let l:nerdwindow = win_getid()

    " Check if choosewin has been loaded.
    if exists('g:loaded_choosewin')
      call choosewin#start(range(1, winnr('$')))
    else
      " Require user input.
      let l:winnr =  input('Window number to open the file: ')

      " Convert the window number to a window id if it exists.
      windo if winnr() ==? l:winnr | let l:winid = win_getid() | endif

      " Check if a window could been found with the given number.
      if exists('l:winid')
        " Jump to the window to mark it for NERDTree as the last active one.
        call win_gotoid(l:winid)
        unlet l:winid

      " No window with the given number could been found, abort.
      else
        echohl WarningMsg
        echo 'Could not found a window with the number ' . l:winnr . '!'
        echohl None
        return
      endif
    endif

    " Jump back to the NERDTree window and continue to open the file.
    call win_gotoid(l:nerdwindow)
    call a:node.activate({'reuse': 'all', 'where': 'p', 'keepopen': !nerdtree#closeTreeOnOpen()})
  endfunction
'''

[[plugins]]
repo='rking/ag.vim'
[[plugins]]
repo='ctrlpvim/ctrlp.vim'
hook_add='''
if executable('ag')
  let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
endif
nnoremap <Leader>g :CtrlP<CR>
'''
