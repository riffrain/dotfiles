# common toml
[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version < 800'
rev = '1.5'

[[plugins]]
repo = 'Shougo/dein.vim'
if = 'v:version >= 800'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  imap <expr><TAB>
   \ pumvisible() ? "\<C-n>" :
   \ neosnippet#expandable_or_jumpable() ?
   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet.vim'
hook_add = '''
"  let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
hook_add = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  endfunction

  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

  let g:neocomplete#sources#dictionary#dictionaries = {
     \ 'default' : '',
     \ 'php' : $HOME.'/.vim/dict/php.dict',
     \ 'ctp' : $HOME.'/.vim/dict/php.dict'
     \ }
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'component': {
      \   'readonly': '%{&readonly?"\ue0a2":""}',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ }
      \ }

  function! LightlineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightlineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
  endfunction

  function! LightlineFilename()
    let fname = expand('%:~')
    return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
      \ fname == '__Tagbar__' ? g:lightline.fname :
      \ fname =~ '__Gundo\|NERD_tree' ? '' :
      \ &ft == 'vimfiler' ? '' :
      \ &ft == 'unite' ? unite#get_status_string() :
      \ &ft == 'vimshell' ? vimshell#get_status_string() :
      \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
      \ ('' != fname ? fname : '[No Name]') .
      \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
    catch
    endtry
    return ''
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
      \ fname == 'ControlP' ? 'CtrlP' :
      \ fname == '__Gundo__' ? 'Gundo' :
      \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
      \ fname =~ 'NERD_tree' ? 'NERDTree' :
      \ &ft == 'unite' ? 'Unite' :
      \ &ft == 'vimfiler' ? 'VF' :
      \ &ft == 'vimshell' ? 'VimShell' :
      \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
        \ , g:lightline.ctrlp_next], 0)
    else
    return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
    \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
  endfunction

  augroup AutoSyntastic
    autocmd!
    autocmd BufWritePost *.c,*.cpp call s:syntastic()
  augroup END
  function! s:syntastic()
    SyntasticCheck
    call lightline#update()
  endfunction
'''

[[plugins]]
repo = 'Erichain/vim-monokai-pro'
hook_add = '''
  " Reduce LineNr colors
  " "autocmd ColorScheme * highlight LineNr ctermbg=234 ctermfg=240
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme monokai_pro
'''

# Completion
[[plugins]]
repo = 'cohama/lexima.vim'
[[plugins]]
repo = 'tpope/vim-surround'

# hilight
[[plugins]]
repo = 'vim-syntastic/syntastic'
[[plugins]]
repo = 'mustache/vim-mustache-handlebars'

# Emmet
# [[plugins]]
# repo = 'mattn/emmet-vim'
# hook_source = '''
#   let g:user_emmet_install_global = 1
#   let g:user_emmet_leader_key='<C-e>'
#   let g:user_emmet_mode='ivn'
#   let g:use_emmet_complete_tag = 1
#   let g:user_emmet_expandabbr_key = '<Space>'
#   "autocmd MyAutoCmd VimEnter * nested EmmetInstall
# '''

#lint
# [[plugins]]
# repo = 'neomake/neomake'
# [[plugins]]
# repo = 'benjie/neomake-local-eslint.vim'
# depends = 'neomake/neomake'
# hook_add = '''
#   autocmd! BufWritePost * Neomake
#   let g:neomake_javascript_enabled_makers = ['eslint']
#   let g:neomake_error_sign = {'text': '>>', 'texthl': 'Error'}
#   let g:neomake_warning_sign = {'text': '>>',  'texthl': 'Todo'}
# '''

[[plugins]]
repo = 'leafgarland/typescript-vim'
[[plugins]]
repo = 'othree/yajs.vim'
[[plugins]]
repo = 'pangloss/vim-javascript'
[[plugins]]
repo = 'othree/html5.vim'
hook_add = '''
  autocmd BufNewFile,BufRead *.vue set filetype=html
  autocmd BufNewFile,BufRead *.vue syntax sync fromstart
'''
# [[plugins]]
# repo = 'posva/vim-vue'
# hook_add = '''
#   let g:vue_disable_pre_processors=1
#   autocmd FileType vue syntax sync fromstart
# '''
# [[plugins]]
# repo = 'leafOfTree/vim-vue-plugin'
# hook_add = '''
#   let g:vim_vue_plugin_load_full_syntax = 1
# '''
